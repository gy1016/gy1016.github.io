(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{595:function(e,t,a){"use strict";a.r(t);var n=a(12),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),a("p",[e._v("webpack 处理应用代码时，会从开发者提供的 entry 开始递归地组建起包含所有模块的 dependency graph，之后再将这些 module 打包为 bundles 。")]),e._v(" "),a("h2",{attrs:{id:"模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[e._v("#")]),e._v(" 模块")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("Module")]),e._v(": 资源在 webpack 内部的映射对象，包含了资源的路径、上下文、依赖、内容等信息")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Dependency")]),e._v(': 在模块中引用其它模块，例如 import "a.js" 语句，webpack 会先将引用关系表述为 Dependency 子类并关联 module 对象，等到当前 module 内容都解析完毕之后，启动下次循环开始将 Dependency 对象转换为适当的 Module 子类。')])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Chunk")]),e._v("：用于组织输出结构的对象，webpack 分析完所有模块资源的内容，构建出完整的 Dependency Graph 之后，会根据用户配置及 Dependency Graph 内容构建出一个或多个 chunk 实例，每个 chunk 与最终输出的文件大致上是一一对应的。")])])]),e._v(" "),a("h2",{attrs:{id:"数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[e._v("#")]),e._v(" 数据结构")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ModuleGraph")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);